/* ==========================================================================
   The Grid
   ========================================================================== */

/**
 * The grid is based upon rows using flexbox.
 */
.row {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
}

/**
 * Apply default stying to all elements in a row.
 *
 * This is a bit hackish. I'm assuming only columns will be direct decendants
 * of a row. This syntax just saves some typing.
 */
.row > * {
  padding: $spacing-unit / 2;
  position: relative;
  width: 100%; /* why is this here? */
}

/**
 * Allow for gutters between columns to be adjusted.
 */
.row.gutter-default > * {
  padding: $spacing-unit / 2;
}

.row.gutter-double > * {
  padding: $spacing-unit;
}

.row.gutter-none > * {
  padding: 0;
}

/**
 * Base column classes.
 */
.col-xs-1 { width: 8.333333%; }
.col-xs-2 { width: 16.666666%; }
.col-xs-3 { width: 25%; }
.col-xs-4 { width: 33.333333%; }
.col-xs-5 { width: 41.666666%; }
.col-xs-6 { width: 50%; }
.col-xs-7 { width: 58.333333%; }
.col-xs-8 { width: 66.666666%; }
.col-xs-9 { width: 75%; }
.col-xs-10 { width: 83.333333%; }
.col-xs-11 { width: 91.666666%; }
.col-xs-12 { width: 100%; }

/**
 * Responsive column classes for small viewports and up.
 */
@media (min-width: $sm-min-width) {
  .col-sm-1 { width: 8.333333%; }
  .col-sm-2 { width: 16.666666%; }
  .col-sm-3 { width: 25%; }
  .col-sm-4 { width: 33.333333%; }
  .col-sm-5 { width: 41.666666%; }
  .col-sm-6 { width: 50%; }
  .col-sm-7 { width: 58.333333%; }
  .col-sm-8 { width: 66.666666%; }
  .col-sm-9 { width: 75%; }
  .col-sm-10 { width: 83.333333%; }
  .col-sm-11 { width: 91.666666%; }
  .col-sm-12 { width: 100%; }
}

/**
 * Responsive column classes for medium viewports and up.
 */
@media (min-width: $md-min-width) {
  .col-md-1 { width: 8.333333%; }
  .col-md-2 { width: 16.666666%; }
  .col-md-3 { width: 25%; }
  .col-md-4 { width: 33.333333%; }
  .col-md-5 { width: 41.666666%; }
  .col-md-6 { width: 50%; }
  .col-md-7 { width: 58.333333%; }
  .col-md-8 { width: 66.666666%; }
  .col-md-9 { width: 75%; }
  .col-md-10 { width: 83.333333%; }
  .col-md-11 { width: 91.666666%; }
  .col-md-12 { width: 100%; }
}

/**
 * Responsive column classes for large viewports and up.
 */
@media (min-width: $lg-min-width) {
  .col-lg-1 { width: 8.333333%; }
  .col-lg-2 { width: 16.666666%; }
  .col-lg-3 { width: 25%; }
  .col-lg-4 { width: 33.333333%; }
  .col-lg-5 { width: 41.666666%; }
  .col-lg-6 { width: 50%; }
  .col-lg-7 { width: 58.333333%; }
  .col-lg-8 { width: 66.666666%; }
  .col-lg-9 { width: 75%; }
  .col-lg-10 { width: 83.333333%; }
  .col-lg-11 { width: 91.666666%; }
  .col-lg-12 { width: 100%; }
}

/**
 * Reverse the order of columns within a row.
 */
.reverse {
  flex-direction: row-reverse;
  flex-wrap: wrap-reverse;
}

@media (max-width: $xs-max-width) {
  .reverse-xs {
    flex-direction: row-reverse;
    flex-wrap: wrap-reverse;
  }
}

@media (min-width: $sm-min-width) and (max-width: $sm-max-width) {
  .reverse-sm {
    flex-direction: row-reverse;
    flex-wrap: wrap-reverse;
  }
}

@media (min-width: $md-min-width) and (max-width: $md-max-width) {
  .reverse-md {
    flex-direction: row-reverse;
    flex-wrap: wrap-reverse;
  }
}

@media (min-width: $lg-min-width) {
  .reverse-lg {
    flex-direction: row-reverse;
    flex-wrap: wrap-reverse;
  }
}

/**
 * The .show-gridlines class can be applied to the body or any other element
 * that contains rows. Gridlines aren't intended to be applied to final layouts,
 * but they can be quite useful when creating the initial grid or debugging.
 */
.show-gridlines .row > * {
  border: 1px solid #bbb;
}
